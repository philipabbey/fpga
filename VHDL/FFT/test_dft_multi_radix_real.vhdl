-------------------------------------------------------------------------------------
--
-- Distributed under MIT Licence
--   See https://github.com/philipabbey/fpga/blob/main/LICENCE.
--
-------------------------------------------------------------------------------------
--
-- Construct multiple FFTs of different sizes and radices and compare the outputs
-- with expected data generated by Octave and written to data structures in a package.
--
-- References:
--   1) Fast Fourier Transform (FFT),
--      https://www.cmlab.csie.ntu.edu.tw/cml/dsp/training/coding/transform/fft.html
--   2) Worked examples from:
--      a) https://www.youtube.com/watch?v=AF71Yqo7CoY
--      b) https://www.youtube.com/watch?v=xnVaHkRaJOw
--
-- P A Abbey, 1 Sep 2021
--
-------------------------------------------------------------------------------------

entity test_dft_multi_radix_real is
end entity;


library work; -- Implicit anyway, but acts to group.
  use work.test_fft_pkg.all;
  use work.test_data_fft_pkg.all;

architecture test of test_dft_multi_radix_real is

  -- Construct multiple FFTs of different sizes and radices
  constant tests_all_c : tests_real_arr_t := (
    -- log_num_inputs, radix
    (         2,          2  ), --  0    4 point, hierarchy depth 2
    (         2,          4  ), --  1    4 point, hierarchy depth 1
    (         3,          2  ), --  2    8 point, hierarchy depth 3
    (         3,          4  ), --  3    8 point, hierarchy depth 2, mixed radix
    (         4,          2  ), --  4   16 point, hierarchy depth 4
    (         4,          4  ), --  5   16 point, hierarchy depth 2
    (         4,          8  ), --  6   16 point, hierarchy depth 2, mixed radix
    (         5,          8  ), --  7   32 point, hierarchy depth 2, mixed radix
    (         9,          2  ), --  8  512 point, hierarchy depth 9
    (         9,          4  ), --  9  512 point, hierarchy depth 5, mixed radix
    (         9,          8  ), -- 10  512 point, hierarchy depth 3, mixed radix
    (         9,         32  ), -- 11  512 point, hierarchy depth 2, mixed radix
    (         9,        512  )  -- 12  512 point, hierarchy depth 1
  );
  
  constant tests_c : tests_real_arr_t(0 to 7) := tests_all_c(0 to 7);

  type bool_arr_t is array(tests_c'range) of boolean;
  signal tests_passed   : bool_arr_t := (others => false);
  signal tests_finished : bool_arr_t := (others => false);

begin

  test_g: for t in tests_c'range generate

    constant log_num_inputs_c : positive := tests_c(t).log_num_inputs; -- 2**log_num_inputs_c points
    constant radix_c          : positive := tests_c(t).radix;

    signal i, o : work.fft_real_pkg.complex_vector(0 to (2**log_num_inputs_c)-1) := (others => (0.0, 0.0));

  begin

    process
      constant input_data_c  : complex_vector_arr_t := test_data_inputs(2**log_num_inputs_c);
      constant output_data_c : complex_vector_arr_t := test_data_outputs(2**log_num_inputs_c);
      constant tolerance_c   : real                 := 0.001; -- Permissive value
      variable passed        : boolean              := true;
    begin

      for k in input_data_c'range loop
        i <= input_data_c(k);
        wait for iteration_time_c / 2;

        report "DUT" & integer'image(t) & ": " & integer'image(2**log_num_inputs_c) & "-point Radix-" & integer'image(radix_c) & " FFT, checking data set " & integer'image(k);
        for j in output_data_c(k)'range loop
          if not compare_output(o(j), output_data_c(k)(j), tolerance_c) then
            passed := false;
            report "Index " & integer'image(j) & " values " & complex_str(o(j)) & " /= "
                 & complex_str(output_data_c(k)(j)) & " (test data)." severity warning;
          end if;
        end loop;
        wait for iteration_time_c / 2;
      end loop;

      if passed then
        report integer'image(2**log_num_inputs_c) & "-point FFT results: PASSED" severity note;
        tests_passed(t) <= true;
      else
        report integer'image(2**log_num_inputs_c) & "-point FFT results: FAILED" severity warning;
      end if;
      tests_finished(t) <= true;

      wait;
    end process;


    dut : entity work.dft_multi_radix_real
      generic map (
        log_num_inputs_g => log_num_inputs_c,
        max_radix_g      => radix_c
      )
      port map (
        i => i,
        o => o
      );

  end generate;


  -- Accumulate results from each individual test and print a final pass or fail message.
  process(tests_finished)
    constant all_true : bool_arr_t := (others => true);
  begin
    if tests_finished = all_true then
      if tests_passed = all_true then
        report "All Tests PASSED" severity note;
      else
        report "Some Tests FAILED, check above." severity warning;
      end if;
    end if;
  end process;

end architecture;


architecture instance of test_dft_multi_radix_real is

  constant log_num_inputs_c : positive := 6;
  constant radix_c          : positive := 64;

  signal i, o : work.fft_real_pkg.complex_vector(0 to (2**log_num_inputs_c)-1) := (others => (0.0, 0.0));

begin

  assert false
    report "Radix-" & integer'image(radix_c) & " " & integer'image(2**log_num_inputs_c) & "-point FFT"
    severity note;

  dut : entity work.dft_multi_radix_real
    generic map (
      log_num_inputs_g => log_num_inputs_c,
      max_radix_g      => radix_c
    )
    port map (
      i => i,
      o => o
    );

end architecture;
